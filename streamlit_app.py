# ====== JOGO COM DICAS ======
import streamlit as st
import numpy as np
import pandas as pd
import random

# Evita conflito se j√° chamou set_page_config em outra p√°gina
try:
    st.set_page_config(page_title="Jogo da Elasticidade", layout="centered")
except:
    pass

# ------------------ Par√¢metros do jogo ------------------
produtos_jogo = {
    "Notebook de entrada": {
        "Estudante": {"a": 12000, "b": 5.8},
        "Fam√≠lia":   {"a":  9500, "b": 3.6},
        "Empresa":   {"a":  7000, "b": 2.4},
    },
    "TV 50\" b√°sica": {
        "Estudante": {"a":  8000, "b": 3.8},
        "Fam√≠lia":   {"a": 14000, "b": 5.2},
        "Empresa":   {"a":  4000, "b": 1.5},
    },
    "Cadeira ergon√¥mica PRO": {
        "Estudante": {"a":  6000, "b": 2.8},
        "Fam√≠lia":   {"a":  7500, "b": 3.4},
        "Empresa":   {"a": 11000, "b": 4.5},
    },
}
cenarios_jogo = {"Base": 1.0, "Alta renda": 1.1, "Cr√©dito f√°cil": 1.2, "Recess√£o": 0.85}

P_MIN, P_MAX, STEP = 1000, 3000, 50

# ------------------ Fun√ß√µes ------------------
def q_linear(a, b, p, shock=1.0):
    return max(0, (a * shock) - b * p)

def receita_total(produto_cfg, p, shock):
    return sum(p * q_linear(cfg["a"], cfg["b"], p, shock) for cfg in produto_cfg.values())

def melhor_preco(produto_cfg, shock):
    precos = np.arange(P_MIN, P_MAX + STEP, STEP)
    receitas = [receita_total(produto_cfg, p, shock) for p in precos]
    return precos[int(np.argmax(receitas))], max(receitas)

def quente_morno_frio(dist):
    if dist <= 200:   # quente (perto)
        return "üî• **Quente**"
    if dist <= 500:   # morno
        return "‚ô®Ô∏è **Morno**"
    return "üßä **Frio**"  # longe

def tendencia_receita(produto_cfg, p, shock):
    # Derivada da receita total ~ R'(p) ‚âà R(p+step)-R(p) (sinal)
    r_a = receita_total(produto_cfg, p, shock)
    r_b = receita_total(produto_cfg, min(p + STEP, P_MAX), shock)
    if abs(r_b - r_a) < 1e-9:
        return "neutra (perto do pico)"
    return "‚Üë sobe ao aumentar pre√ßo" if r_b > r_a else "‚Üì cai ao aumentar pre√ßo"

def faixa_texto(lo, hi, jitter=50):
    lo = max(P_MIN, lo - random.randint(0, jitter))
    hi = min(P_MAX, hi + random.randint(0, jitter))
    return f"R$ {lo}‚Äì{hi}"

# ------------------ Estado ------------------
if "game" not in st.session_state:
    st.session_state.game = {
        "iniciado": False,
        "tentativas": 0,
        "produto": None,
        "cenario": None,
        "shock": None,
        "p_otimo": None,
        "r_max": None,
        "historico": [],     # (preco, receita, pct_max)
        "lo": P_MIN,
        "hi": P_MAX,
        "usou_dica": False,
    }

G = st.session_state.game

# ------------------ UI ------------------
st.title("üéØ Jogo da Elasticidade-Pre√ßo (com dicas)")

if not G["iniciado"]:
    if st.button("‚ñ∂Ô∏è Iniciar Jogo"):
        G["produto"] = random.choice(list(produtos_jogo.keys()))
        G["cenario"] = random.choice(list(cenarios_jogo.keys()))
        G["shock"] = cenarios_jogo[G["cenario"]]
        G["p_otimo"], G["r_max"] = melhor_preco(produtos_jogo[G["produto"]], G["shock"])
        G["iniciado"] = True
        G["tentativas"] = 0
        G["historico"] = []
        G["lo"], G["hi"] = P_MIN, P_MAX
        G["usou_dica"] = False
        st.rerun()
else:
    st.markdown(f"**Produto:** {G['produto']}  |  **Cen√°rio:** {G['cenario']}")
    preco_input = st.number_input("üí∞ Seu chute (R$)", min_value=P_MIN, max_value=P_MAX, step=STEP)

    cols = st.columns([1,1,1])
    with cols[0]:
        tentar = st.button("Chutar pre√ßo")
    with cols[1]:
        dica_btn = st.button("üéÅ Dica √∫nica (1 por jogo)")
    with cols[2]:
        desistir = st.button("üîÅ Reiniciar")

    if desistir:
        st.session_state.pop("game", None)
        st.rerun()

    # Dica √∫nica: revela uma faixa aproximada adicional (sem n√∫meros exatos)
    if dica_btn and not G["usou_dica"]:
        # abre uma faixa centrada no √≥timo com largura ~ 500‚Äì800
        largura = random.choice([500, 600, 700, 800])
        lo = max(P_MIN, G["p_otimo"] - largura//2)
        hi = min(P_MAX, G["p_otimo"] + largura//2)
        st.info(f"üí° **Dica:** o pre√ßo √≥timo est√° **aproximadamente** entre **{faixa_texto(lo, hi, jitter=0)}**.")
        G["usou_dica"] = True
    elif dica_btn and G["usou_dica"]:
        st.warning("Voc√™ j√° usou sua dica √∫nica nesta rodada.")

    if tentar:
        G["tentativas"] += 1
        r = receita_total(produtos_jogo[G["produto"]], preco_input, G["shock"])
        pct = r / G["r_max"] if G["r_max"] > 0 else 0.0
        G["historico"].append((preco_input, int(r), pct))

        # Dire√ß√£o + Quente/Morno/Frio + % da m√°xima
        dist = abs(preco_input - G["p_otimo"])
        termometro = quente_morno_frio(dist)
        direcao = "‚¨ÜÔ∏è Suba o pre√ßo" if preco_input < G["p_otimo"] else "‚¨áÔ∏è Abaixe o pre√ßo"
        st.warning(f"{termometro} | {direcao} | Voc√™ fez **{pct:,.1%}** da **receita m√°xima**.".replace(",", "."))

        # Tend√™ncia da receita (qualitativa)
        st.caption(f"Tend√™ncia local da receita: **{tendencia_receita(produtos_jogo[G['produto']], preco_input, G['shock'])}**.")

        # Estreitamento de faixa prov√°vel (com pequena folga)
        folga = random.choice([50, 100, 150])
        if preco_input < G["p_otimo"]:
            G["lo"] = max(G["lo"], preco_input + folga)
        else:
            G["hi"] = min(G["hi"], preco_input - folga)

        st.info(f"üìé **Faixa prov√°vel atual**: **{faixa_texto(G['lo'], G['hi'])}**")

        # Warmer/colder vs palpite anterior
        if len(G["historico"]) >= 2:
            prev_dist = abs(G["historico"][-2][0] - G["p_otimo"])
            if dist < prev_dist:
                st.success("üëç Voc√™ est√° **mais perto** do √≥timo que no palpite anterior.")
            elif dist > prev_dist:
                st.error("üëé Voc√™ ficou **mais longe** em rela√ß√£o ao palpite anterior.")
            else:
                st.info("‚û°Ô∏è Mesma dist√¢ncia do palpite anterior.")

        # Fim de jogo: 3 tentativas
        if G["tentativas"] >= 3 and preco_input != G["p_otimo"]:
            st.error(f"üíÄ Fim de jogo! O pre√ßo √≥timo era **R$ {G['p_otimo']}**.")
            st.caption("Dica t√©cnica: em demandas lineares agregadas, a receita total maximiza por volta do ponto de elasticidade unit√°ria agregada.")
            G["iniciado"] = False

        # Acertou na mosca
        if preco_input == G["p_otimo"]:
            st.success(f"üéâ Perfeito! Voc√™ acertou o pre√ßo √≥timo: **R$ {G['p_otimo']}**")
            st.balloons()
            G["iniciado"] = False

    # Hist√≥rico compacto
    if G["historico"]:
        st.subheader("üìú Hist√≥rico")
        df = pd.DataFrame(G["historico"], columns=["Pre√ßo", "Receita", "% da M√°xima"])
        df["% da M√°xima"] = (df["% da M√°xima"]*100).round(1).astype(str) + "%"
        st.table(df)
